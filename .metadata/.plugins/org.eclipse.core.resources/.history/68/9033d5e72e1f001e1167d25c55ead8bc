package com.coforge.main.controller;

import java.util.List;
import java.util.Objects;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import com.coforge.main.dto.ForgotPasswordRequestDto;
import com.coforge.main.dto.ForgotPasswordResponseDto;
import com.coforge.main.dto.LoginRequestDto;
import com.coforge.main.dto.LoginResponseDto;
import com.coforge.main.dto.ResetPasswordRequestDto;
import com.coforge.main.dto.ResetPasswordResponseDto;
import com.coforge.main.dto.UserDetailsRequestDto;
import com.coforge.main.dto.UserDetailsResponseDto;
import com.coforge.main.model.UserDetails;
import com.coforge.main.service.UserRegistrationService;

@RestController
@RequestMapping("/api/v1/users")
public class UserRegistrationController {

	private static final Logger log = LoggerFactory.getLogger(UserRegistrationController.class);

	@Autowired
	private UserRegistrationService userRegistrationService;

	@PostMapping("/signUp")
	public ResponseEntity<UserDetailsResponseDto> userRegistration(
			@RequestBody @Valid UserDetailsRequestDto userDetailsRequestDto) {
		log.info("Executing userRegistration...");
		log.info("Request for userRegistration: {}", userDetailsRequestDto);
		UserDetailsResponseDto userDetailsResponseDto = userRegistrationService.registerUser(userDetailsRequestDto);
//		if (Objects.nonNull(userDetailsResponseDto)) {
		return new ResponseEntity<>(userDetailsResponseDto, HttpStatus.CREATED);
//		}
//		return new ResponseEntity ("Bad Request", HttpStatus.BAD_REQUEST);
	}

	@PostMapping("/signIn")
	public ResponseEntity<LoginResponseDto> userLogin(@RequestBody @Valid LoginRequestDto loginRequestDto) {
		log.info("Executing userLogin...");
		log.info("Request for userLogin: {}", loginRequestDto);
		LoginResponseDto loginResponse = userRegistrationService.loginUser(loginRequestDto);
		return new ResponseEntity<>(loginResponse, HttpStatus.OK);
	}

	@PostMapping("/reset-password")
	public ResponseEntity<ResetPasswordResponseDto> changePassword(
			@RequestBody @Valid ResetPasswordRequestDto resetPasswordRequestDto) {
		log.info("Executing changePassword...");
		log.info("Request for changePassword: {}", resetPasswordRequestDto);
		ResetPasswordResponseDto resetPasswordResponse = userRegistrationService.resetPassword(resetPasswordRequestDto);
		return new ResponseEntity<>(resetPasswordResponse, HttpStatus.OK);
	}

	@PostMapping("/forgot-password")
	public ResponseEntity<ForgotPasswordResponseDto> forgotPassword(
			@RequestBody @Valid ForgotPasswordRequestDto forgotPasswordRequestDto, UriComponentsBuilder uriBuilder) {
		log.info("Executing forgotPassword...");
		log.info("Request for forgotPassword: {}", forgotPasswordRequestDto);
		ForgotPasswordResponseDto forgotPasswordResponse = userRegistrationService
				.forgotPassword(forgotPasswordRequestDto.getEmail(), uriBuilder);
		return new ResponseEntity<>(forgotPasswordResponse, HttpStatus.OK);
	}

	@GetMapping
	public ResponseEntity<List<UserDetails>> getAllUsers() {
		log.info("Executing getAllUsers...");
		List<UserDetails> users = userRegistrationService.retrieveAllUsers();
		if (users.isEmpty()) {
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		}

		return new ResponseEntity<List<UserDetails>>(users, HttpStatus.OK);
	}

	@GetMapping("/{email}")
	public ResponseEntity<UserDetails> getUserByEmail(@PathVariable("email") String email) {
		log.info("Executing getUserByEmail...");
		UserDetails user = userRegistrationService.retrieveUserByEmail(email);
		return new ResponseEntity<>(user, HttpStatus.OK);
	}
}
