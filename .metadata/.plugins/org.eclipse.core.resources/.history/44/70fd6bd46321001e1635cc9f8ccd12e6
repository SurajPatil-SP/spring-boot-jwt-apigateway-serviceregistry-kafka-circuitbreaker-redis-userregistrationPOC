package com.coforge.main.controller;

import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.text.SimpleDateFormat;
import java.util.UUID;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.web.util.UriComponentsBuilder;

import com.coforge.main.dto.ForgotPasswordRequestDto;
import com.coforge.main.dto.ForgotPasswordResponseDto;
import com.coforge.main.dto.LoginRequestDto;
import com.coforge.main.dto.LoginResponseDto;
import com.coforge.main.dto.UserDetailsRequestDto;
import com.coforge.main.dto.UserDetailsResponseDto;
import com.coforge.main.exceptions.InvalidPasswordException;
import com.coforge.main.exceptions.UserNotFoundException;
import com.coforge.main.service.UserRegistrationService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@WebMvcTest(UserRegistrationController.class)
public class UserRegistrationControllerTest {

	@MockBean
	private UserRegistrationService userRegistrationService;

	@Autowired
	private MockMvc mockMvc;
	
	private static final String RESET_PASSWORD_URL = "http://localhost:8083/api/v1/users/reset-password";

	@Test
	public void testUserRegistration() throws JsonProcessingException, Exception {
		
		UserDetailsResponseDto userDetailsResponseDto = new UserDetailsResponseDto();
		userDetailsResponseDto.setUserId(1L);
		userDetailsResponseDto.setEmail("peter@gmail.com");
		userDetailsResponseDto.setMessage("User Registration Successful");

		UserDetailsRequestDto userDetailsRequestDto = new UserDetailsRequestDto();
		userDetailsRequestDto.setFirstName("Peter");
		userDetailsRequestDto.setLastName("Finch");
		userDetailsRequestDto.setDateOfBirth(new SimpleDateFormat("dd/mm/yyyy").parse("10/10/1990"));
		userDetailsRequestDto.setMobileNumber("9899748596");
		userDetailsRequestDto.setEmail("peter@gmail.com");
		userDetailsRequestDto.setDepartmentCode("CoforgeD-1");
		userDetailsRequestDto.setPassword("peter@123");
		userDetailsRequestDto.setToken(null);
		userDetailsRequestDto.setTokenCreationDate(null);
		
		when(userRegistrationService.registerUser(userDetailsRequestDto))
		.thenReturn(userDetailsResponseDto);

		mockMvc.perform(post("/api/v1/users/signUp")
					.contentType(MediaType.APPLICATION_JSON)
					.content(new ObjectMapper().writeValueAsString(userDetailsRequestDto)))
				.andExpect(status().isCreated())
				.andExpect(jsonPath("$.userId").value(userDetailsResponseDto.getUserId()))
				.andExpect(jsonPath("$.email").value(userDetailsResponseDto.getEmail()))
				.andExpect(jsonPath("$.message").value(userDetailsResponseDto.getMessage()))
				.andReturn();
		
		verify(userRegistrationService, times(1)).registerUser(userDetailsRequestDto);
	}
	
	@Test
	public void testUserRegistrationInvalidInput() throws JsonProcessingException, Exception {

		UserDetailsRequestDto userDetailsRequestDto = new UserDetailsRequestDto();
		userDetailsRequestDto.setFirstName("Peter");
		userDetailsRequestDto.setLastName("Finch");
		userDetailsRequestDto.setDateOfBirth(new SimpleDateFormat("dd/mm/yyyy").parse("10/10/1990"));
		userDetailsRequestDto.setMobileNumber("9899748596");
		userDetailsRequestDto.setEmail("petergmail.com"); // Email not in format
		userDetailsRequestDto.setDepartmentCode("CoforgeD-1");
		userDetailsRequestDto.setPassword("peter@123");

		mockMvc.perform(post("/api/v1/users/signUp")
					.contentType(MediaType.APPLICATION_JSON)
					.content(new ObjectMapper().writeValueAsString(userDetailsRequestDto)))
				.andExpect(status().isBadRequest())
				.andReturn();
	}
	
	@Test
	public void testUserLogin() throws JsonProcessingException, Exception {
		LoginRequestDto loginRequestDto = new LoginRequestDto();
		loginRequestDto.setEmail("peter@gmail.com");
		loginRequestDto.setPassword("peter@123");

		LoginResponseDto loginResponseDto = new LoginResponseDto();
		loginResponseDto.setMessage("User login successful");

		when(userRegistrationService.loginUser(loginRequestDto)).thenReturn(loginResponseDto);

		mockMvc.perform(post("/api/v1/users/signIn")
					.contentType(MediaType.APPLICATION_JSON)
					.content(new ObjectMapper().writeValueAsString(loginRequestDto)))
				.andExpect(status().isOk())
				.andExpect(jsonPath("$.message").value(loginResponseDto.getMessage()))
				.andReturn();

		verify(userRegistrationService, times(1)).loginUser(loginRequestDto);
	}
	
	@Test
	public void testUserLoginInvalidCredentials() throws JsonProcessingException, Exception {
		LoginRequestDto loginRequestDto = new LoginRequestDto();
		loginRequestDto.setEmail("peter@gmail.com");
		loginRequestDto.setPassword("PETER@123");

		when(userRegistrationService.loginUser(loginRequestDto)).thenThrow(new InvalidPasswordException("Password is incorrect"));

		mockMvc.perform(post("/api/v1/users/signIn")
					.contentType(MediaType.APPLICATION_JSON)
					.content(new ObjectMapper().writeValueAsString(loginRequestDto)))
				.andExpect(status().isBadRequest())
				.andReturn();

		verify(userRegistrationService, times(1)).loginUser(loginRequestDto);
	}
	
	@Test
	public void testUserLoginUserNotFound() throws JsonProcessingException, Exception {
		LoginRequestDto loginRequestDto = new LoginRequestDto();
		loginRequestDto.setEmail("peterfinch@gmail.com");
		loginRequestDto.setPassword("peter@123");

		when(userRegistrationService.loginUser(loginRequestDto)).thenThrow(new UserNotFoundException("User not found with email: " + loginRequestDto.getEmail()));

		mockMvc.perform(post("/api/v1/users/signIn")
					.contentType(MediaType.APPLICATION_JSON)
					.content(new ObjectMapper().writeValueAsString(loginRequestDto)))
				.andExpect(status().isNotFound())
				.andReturn();

		verify(userRegistrationService, times(1)).loginUser(loginRequestDto);
	}
	
	@Test
	public void testForgotPassword() throws JsonProcessingException, Exception {

		ForgotPasswordRequestDto forgotPasswordRequestDto = new ForgotPasswordRequestDto();
		forgotPasswordRequestDto.setEmail("peter@gmail.com");

		UriComponentsBuilder uriBuilder = UriComponentsBuilder.newInstance();

		ForgotPasswordResponseDto forgotPasswordResponseDto = new ForgotPasswordResponseDto();
		forgotPasswordResponseDto.setEmail("peter@gmail.com");
		forgotPasswordResponseDto.setToken(UUID.randomUUID().toString());
		forgotPasswordResponseDto.setResetLink(RESET_PASSWORD_URL);

		when(userRegistrationService.forgotPassword(forgotPasswordRequestDto.getEmail(), uriBuilder)).thenReturn(forgotPasswordResponseDto);
		
		mockMvc.perform(post("/api/v1/users/forgot-password")
					.contentType(MediaType.APPLICATION_JSON)
					.content(new ObjectMapper().writeValueAsString(forgotPasswordRequestDto)))
				.andExpect(status().isOk())
				.andDo(print())
				.andExpect(jsonPath("$.email").value(forgotPasswordResponseDto.getEmail()))
				.andExpect(jsonPath("$.token").value(forgotPasswordResponseDto.getToken()))
				.andExpect(jsonPath("$.resetLink").value(forgotPasswordResponseDto.getResetLink()))
				.andReturn();

	}
}
